;
;
;******************************************************************************
;
;	Arquivo de Referência para o desenvolvimento do kernel.
;
;	Versão: 2021.2
;
;	Áreas de memória
;
;	0000 - 7FFF		_KERNEL
;					Área de Kernel para implementação dos alunos
;
;	0100 - 01FF		_VETTAB
;					Tabela com os vetores das funções do kernel
;					*** CUIDADO! Esse vetor está no meio da área de código ***
;
;	8000 - FF7F		_APP
;					Área onde será colocado o programa de aplicação.
;					Esse programa vai fazer o acesso aos periféricos e interrupções, através das funções do Kernel.
;
;	FF80 - FFBF 	_IOAREA16
;					Area de perifericos, acessada na base 16 bits
;
;	FFC0 - FFFF		_IOAREA08
;					Area de perifericos, acessada na base 8 bits
;					
;******************************************************************************


_KERNEL:	equ	h0000
_VETTAB:	equ	h0100
_RESET:		equ	_VETTAB+H0100
_APP:		equ	h8000
_IOAREA16:	equ	hFF80
_IOAREA08:	equ	hFFC0


;
;------------------------------------------------------------------------------
;	Área reservada para os periféricos
;------------------------------------------------------------------------------

; Acesso em 16 bits
		org		_IOAREA16
		daw		[31]
IVET:	dw		0			; Vetor de interrupção

; Acesso em 8 bits
		org		_IOAREA08
		dab		[23]
TIMDT:	db		0			; Registro de programação do timer
INTS:	db		0			; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db		0			; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db		0			; Status do teclado
TECDT:	db		0			; Dado do teclado
VISOR:	dab		[36]		; Portas de acesso ao visor

;	
;------------------------------------------------------------------------------
;	Ponto de entrada do RESET do processador
;------------------------------------------------------------------------------
		org		_KERNEL
		jmp		_RESET

;
;------------------------------------------------------------------------------
;	Area do kernel com os vetores das funções do kernel
;------------------------------------------------------------------------------
		org		_VETTAB
		dw		_kbhit
		dw		_getchar
		dw		_putchar
		dw		_putmsg
		dw		_getclock
		dw		_setclock
		dw		_setalarm
		
;	
;------------------------------------------------------------------------------
;	Código de RESET (BOOT) do processador/interrupção
;------------------------------------------------------------------------------
org		_RESET
	; 1) Desabilitar o sistema de interrupções

		clr INTS

	; 2) Inicializar o stack pointer (SP = R6)

		mov #h8000, R6

	; 3) Inicializar as variáveis internas usadas pelo sistema de interrupções e periféricos (IVET, INTE, etc.)

		clr			INTE			; Reset pedidos de interrupcao
		mov 		#isr, IVET		; inicializa o vetor de interrupcao

	; 4) Inicializar as variáveis internas do kernel



	; 5) Inicializar o teclado zerando o byte de estado (TECST, endereço 65498)

		clr 	TECST				; Reset estado e dados do hardware do teclado
		clr 	TECDT

	; 6) Inicializar o timer

		mov 	#250,TIMDT			; timer = 250;

	; 7) Limpar o visor

		jsr 	r7, clear_display	; clear_display();

	; 8) Habilitar interrupções

		mov 	#interrupt,INTE		; interrupcoes de timer e teclado

	; 9) Retornar para o programa de aplicação com um desvio para o endereço _APP da memória
		jmp		_APP

;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
_kbhit:

		clr 	r0				; r0 = false
		cmp 	TECST, #h80
		bne 	not_found			; if (r0 = 0x80)	
		inc 	r0				;	 r0 = true
	not_found:
		rts		r7			; return r0
		
;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
_getchar:

		mov	 	#1, getchar_actived
	char_not_found:
		jsr 	r7, _kbhit			; while (_kbhit() == false) {}
		tst 	r0
		bne 	char_not_found
		
		mov 	TECDT, r0

		rts	r7
		
;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
_putchar:
		rts		r7

;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
_putmsg:
		rts		r7
	
;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
_getclock:
										; struct Hora {int hor, min, sec; } clock;
		mov 	clock_hor, r2			; clock.hor = hor_atual
		mov 	clock_min, r1			; clock.min = min_atual
		mov 	clock_sec, r0			; clock.sec = sec_atual
		rts	r7							; return clock
		
;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
_setclock:
		
		clr 	INTE

							; struct Hora {int hor, min, sec; } clock;
		cmp 	r3, #60				; if (clock.sec > 60) {
		blt	sec_not_error			; 	error = 1;
		mov 	#1, r0				
		jmp 	end				;	return;

	sec_not_error:
		mov 	r3, clock_sec			; sec_atual = clock.sec

		cmp 	r4, #60				; if (clock.min > 60) {
		blt	min_not_error			; 	error = 2;
		mov  	#2, r0
		jmp 	end				;	return;

	min_not_error:
		mov 	r4, clock_min			; min_atual = clock.min
	
		cmp 	r5, #24				; if (clock.hor > 24) {
		blt	hor_not_error			; 	error = 3;
		mov 	#3, r0
		jmp 	end				;	return;

	hor_not_error:
		mov 	r5, clock_hor			; hor_atual = clock.hor
		clr 	r0				; error = 0;

	end:

		mov 	#interrupt, INTE

		rts	r7 				; return;
		
;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
_setalarm:

		clr 	INTE
		clr 	r0

		cmp 	r2, #60
		blt	sec_not_error_a
		mov 	#1, r0
		jmp 	end_alarm

	sec_not_error_a:
		mov 	r2, alarm_sec

		cmp 	r3, #60
		blt	min_not_error_a
		mov  	#2, r0
		jmp 	end_alarm

	min_not_error_a:
		mov 	r3, alarm_min
	
		cmp 	r4, #24
		blt	hor_not_error_a
		mov 	#3, r0
		jmp 	end_alarm

	hor_not_error_a:
		mov 	r4, alarm_hor
		mov 	r5, callback_routine
		mov 	#1, alarm_active

	end_alarm:
		
		mov 	#interrupt, INTE

		rts	r7

;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
isr:
		mov		r0,-(r6)		; Salva os registradores na pilha
		mov		r1,-(r6)
		mov		r2,-(r6)
		mov		r3,-(r6)
		mov		r4,-(r6)
		mov		r5,-(r6)
		
		clr 		INTE

		cmp 		INTS, #h81		; if (interrupcao.source == timer){
		bne		ISR2			
		jsr		r7,ISRtim		; 	Tratamento da INT do TIMER
		and		#hFFFE,INTS		; 	Desliga bit de INT TIMER
		jmp 		isrEND			; }
	ISR2:

	isrEND:
		mov		(r6)+,r5
		mov		(r6)+,r4		; Retorna os registradores da pilha
		mov		(r6)+,r3
		mov		(r6)+,r2
		mov		(r6)+,r1
		mov		(r6)+,r0
			
		mov 		#interrupt, INTE

		rti					; Return From Interrupt
	
;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
ISRtim:
		
		jsr 	r7, inc_clock			
		jsr 	r7, alarm_verify

	endISRtim:
		rts 	r7

;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
inc_clock:
		inc 	tick_cnt				; incrementa contador
		cmp 	tick_cnt, #4			; if (count == 4) {
		bne		end_inc_timer			; 	count = 0;
		
		clr 	tick_cnt				;	inc_timer();
		inc 	clock_sec				; sec ++;
		cmp 	clock_sec, #60			; if (sec == 60) {
		bne 	end_inc_timer			
	
		clr 	clock_sec				; 	sec = 0;
		inc 	clock_min				; 	min ++;
		cmp 	clock_min, #60
		bne 	end_inc_timer			;	if (min == 60){

		clr 	clock_min				;		min = 0;
		inc 	clock_hor				; 		hor ++;
		cmp 	clock_hor, #24			; 		if (hor == 24)
		bne 	end_inc_timer

		clr 	clock_hor				;			hor = 0;
										;	}
										; }

	end_inc_timer:
		rts 	r7

;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
alarm_verify:

		cmp 	alarm_status, #1
		bne 	end_alarm_verify

		jsr 	r7, _getclock

		cmp 	r0, alarm_sec			; if (clock == alarm)
		bne 	end_alarm_verify

		cmp 	r1, alarm_min
		bne 	end_alarm_verify

		cmp 	r2, alarm_hor
		bne 	end_alarm_verify

	end_alarm_verify:

		jsr r7

tick_cnt:		dw 0 
clock_sec:		dw 0
clock_min:		dw 0
clock_hor:		dw 0
alarm_sec:		dw 0
alarm_min:		dw 0
alarm_hor:		dw 0

interrupt: 		equ 81

getchar_actived:		dw 0
alarm_status:			dw 0
